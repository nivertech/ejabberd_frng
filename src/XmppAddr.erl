%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:1.6.13
%% Purpose: encoder and decoder to the types in mod XmppAddr

-module('XmppAddr').
-include("XmppAddr.hrl").
-define('RT_BER',asn1rt_ber_bin_v2).
-asn1_info([{vsn,'1.6.13'},
            {module,'XmppAddr'},
            {options,[ber_bin_v2,report_errors,{cwd,[47,104,111,109,101,47,122,118,105,47,119,111,114,107,115,112,97,99,101,47,101,106,97,98,98,101,114,100,47,115,114,99]},{outdir,[47,104,111,109,101,47,122,118,105,47,119,111,114,107,115,112,97,99,101,47,101,106,97,98,98,101,114,100,47,115,114,99]},noobj,optimize,compact_bit_string,der,{i,[46]},{i,[47,104,111,109,101,47,122,118,105,47,119,111,114,107,115,112,97,99,101,47,101,106,97,98,98,101,114,100,47,115,114,99]}]}]).

-export([encoding_rule/0]).
-export([
'enc_XmppAddr'/2
]).

-export([
'dec_XmppAddr'/2
]).

-export([
'id-on-xmppAddr'/0
]).

-export([info/0]).


-export([encode/2,decode/2,encode_disp/2,decode_disp/2]).

encoding_rule() ->
   ber_bin_v2.

encode(Type,Data) ->
case catch encode_disp(Type,Data) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {Bytes,_Len} ->
    {ok,Bytes};
  Bytes ->
    {ok,Bytes}
end.

decode(Type,Data) ->
case catch decode_disp(Type,element(1,?RT_BER:decode(Data))
) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  Result ->
    {ok,Result}
end.

encode_disp('XmppAddr',Data) -> 'enc_XmppAddr'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('XmppAddr',Data) -> 'dec_XmppAddr'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).





info() ->
   case ?MODULE:module_info() of
      MI when is_list(MI) ->
         case lists:keysearch(attributes,1,MI) of
            {value,{_,Attributes}} when is_list(Attributes) ->
               case lists:keysearch(asn1_info,1,Attributes) of
                  {value,{_,Info}} when is_list(Info) ->
                     Info;
                  _ ->
                     []
               end;
            _ ->
               []
         end
   end.


%%================================
%%  XmppAddr
%%================================
'enc_XmppAddr'(Val) ->
    'enc_XmppAddr'(Val, [<<12>>]).


'enc_XmppAddr'({'XmppAddr',Val}, TagIn) ->
   'enc_XmppAddr'(Val, TagIn);

'enc_XmppAddr'(Val, TagIn) ->
?RT_BER:encode_UTF8_string([], Val, TagIn).


'dec_XmppAddr'(Tlv) ->
   'dec_XmppAddr'(Tlv, [12]).

'dec_XmppAddr'(Tlv, TagIn) ->
?RT_BER:decode_UTF8_string(Tlv,TagIn).

'id-on-xmppAddr'() ->
{1,3,6,1,5,5,7,8,5}.

